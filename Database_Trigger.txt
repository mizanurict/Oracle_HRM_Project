CREATE OR REPLACE TRIGGER SHAWON.TRG_CALC_LATE
BEFORE INSERT OR UPDATE
ON SHAWON.EMP_ATTENDANCE_INFORMATION
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
    -- Calculate late duration
    :NEW.late := 
    CASE 
        WHEN :NEW.time_in IS NOT NULL AND TO_TIMESTAMP(TO_CHAR(:NEW.time_in, 'HH24:MI:SS'), 'HH24:MI:SS') > TO_TIMESTAMP('09:05:59', 'HH24:MI:SS') 
        THEN 
            LPAD(EXTRACT(HOUR FROM (TO_TIMESTAMP(TO_CHAR(:NEW.time_in, 'HH24:MI:SS'), 'HH24:MI:SS') - TO_TIMESTAMP('09:00:00', 'HH24:MI:SS'))), 2, '0') || ':' ||
            LPAD(EXTRACT(MINUTE FROM (TO_TIMESTAMP(TO_CHAR(:NEW.time_in, 'HH24:MI:SS'), 'HH24:MI:SS') - TO_TIMESTAMP('09:00:00', 'HH24:MI:SS'))), 2, '0')
        ELSE '00:00'
    END;
    
    -- Attendance Status 
    :NEW.Status := 
    CASE 
        WHEN :NEW.late IS NOT NULL AND :NEW.late != '00:00' AND :NEW.time_in IS NOT NULL 
        THEN 
            'Present (Late)'
        WHEN :NEW.Absence_Reason= 'Holiday' 
        THEN 
            'Holiday'
        WHEN :NEW.Absence_Reason!='Holiday' AND :NEW.Absence_Reason IS NOT NULL
        THEN 
            :NEW.Absence_Reason
        WHEN :NEW.time_in IS NULL  AND :NEW.Absence_Reason IS NULL
        THEN 
            'Absent'
        ELSE
            'Present'
    END;    

    -- Calculate overtime duration
    :NEW.overtime := 
    CASE 
        WHEN :NEW.time_out IS NOT NULL AND :NEW.time_out > TO_TIMESTAMP('18:29:59', 'HH24:MI:SS') 
        THEN 
            LPAD(EXTRACT(HOUR FROM (:NEW.time_out - TO_TIMESTAMP('18:00:00', 'HH24:MI:SS'))), 2, '0') || ':' ||
            LPAD(EXTRACT(MINUTE FROM (:NEW.time_out - TO_TIMESTAMP('18:00:00', 'HH24:MI:SS'))), 2, '0')
        ELSE 
            '00:00'
    END;
END;
/

---------------------------
CREATE OR REPLACE TRIGGER TRG_LEAVE_INSERT2
AFTER INSERT OR UPDATE
ON LEAVE_APPROVED
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
    current_day DATE; -- প্রতিটি দিনের জন্য একটি ভ্যারিয়েবল
BEGIN
    -- চেক করুন যে স্ট্যাটাস 'Approved' কি না
    IF :NEW.status = 'Approved' THEN
        -- current_day কে start_date দিয়ে শুরু করুন
        current_day := :NEW.start_date;
        
        -- start_date থেকে end_date পর্যন্ত প্রতিটি দিনের জন্য লুপ করুন
        WHILE current_day <= :NEW.end_date LOOP
            -- MERGE স্টেটমেন্ট ব্যবহার করে একই employee_id এবং attendance_date এর জন্য রেকর্ড আপডেট বা নতুন রেকর্ড ইনসার্ট করুন
            MERGE INTO emp_attendance_information eai
            USING dual
            ON (eai.employee_id = :NEW.id AND eai.attendance_date = current_day)
            WHEN MATCHED THEN
                -- যদি employee_id এবং attendance_date একই হয়, রেকর্ড আপডেট করুন
                UPDATE SET
                    eai.absence_reason = :NEW.leave_type,
                    eai.leave_id = :NEW.leave_id
            WHEN NOT MATCHED THEN
                -- যদি employee_id এবং attendance_date একই না হয়, নতুন রেকর্ড ইনসার্ট করুন
                INSERT (employee_id, attendance_date, absence_reason, leave_id)
                VALUES (:NEW.id, current_day, :NEW.leave_type, :NEW.leave_id);
            
            -- তারিখ ১ দিন বাড়ান
            current_day := current_day + 1;
        END LOOP;
    END IF;
END;
/



---------------------------------
CREATE OR REPLACE TRIGGER SHAWON.TRG_UPDATE_EMP_SALARY
AFTER UPDATE
ON SHAWON.EMP_SALARY_ACCOUNT_INFORMATION
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
    UPDATE emp_list
    SET  
	emp_payscale= :NEW.paygrade || ' - ' || :NEW.payscale,  
       	emp_payroll_schedule =:NEW.payroll_name, 
	emp_salary =:NEW.gross_salary
    WHERE emp_code = :OLD.pf;  
END;
/

-------------------------------------------------
CREATE OR REPLACE TRIGGER SHAWON.TRG_UPDATE_EMP_STATUS
AFTER UPDATE
ON SHAWON.EMP_LIST
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

    UPDATE emp_basic_information
    SET is_deleted = CASE 
                        WHEN :NEW.emp_status = 'Inactive' THEN 1  
                        ELSE 0                               
                     END,
        last_updated = SYSDATE
    WHERE emp_code = :NEW.emp_code;

 
    UPDATE emp_employment_information
    SET status = CASE 
                    WHEN :NEW.emp_status = 'Inactive' THEN 'Inactive'  
                    ELSE 'Active'                                   
                 END
    WHERE pf = :NEW.emp_code;


END;
/


-------------------------
CREATE OR REPLACE TRIGGER SHAWON.TRG_UPDATE_Leave_STATUS
AFTER UPDATE
ON SHAWON.LEAVE_APPROVED
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
    UPDATE leave_application
    SET status = 
    CASE 
        WHEN :NEW.status = 'Approved' THEN 'Approved'
        ELSE   
        :NEW.status                           
        END
    WHERE :NEW.leave_id= :OLD.leave_id;
END;
/
